//
//  Flow.swift
//  SwiftUI-Flows
//
//  Created by Mark Onyschuk on 6/27/25.
//  Copyright 2025 by Dimension North Inc. All Rights Reserved.
//

import Foundation

// MARK: - Flow Components

/// The direction of a navigation transition within a `Flow`.
public enum FlowDirection: Equatable {
    /// A transition to a new, subsequent step.
    case forward
    /// A transition back to a previous step.
    case backward
}

/// A wrapper that pairs a `Step` with a unique, stable identifier.
///
/// This is essential for SwiftUI's animation system, which relies on stable view identities to
/// correctly apply transitions between different states. Each time a step is pushed onto the
/// history, it is wrapped in a new `UniqueStep` instance.
public struct UniqueStep<Step: Equatable>: Equatable, Identifiable {
    /// A stable, unique identifier for this specific instance in the flow's history.
    public let id: UUID
    /// The underlying step value.
    public let step: Step

    /// Creates a new unique step.
    /// - Parameters:
    ///   - id: A unique identifier. A new `UUID` is generated by default.
    ///   - step: The step value to wrap.
    public init(id: UUID = UUID(), step: Step) {
        self.id = id
        self.step = step
    }
}

/// A data structure that manages the navigation stack for a `Flow`.
///
/// It maintains a history of steps, allowing for pushing new steps and popping back to previous ones.
public struct FlowHistory<Step: Equatable> {
    /// The current, active step at the top of the navigation stack.
    public var top: UniqueStep<Step> { items.last! }

    /// A Boolean value indicating whether the history stack can be popped.
    ///
    /// This is `true` if there is more than one item in the history.
    public var canPop: Bool { items.count > 1 }

    /// The sequence of unique steps that form the navigation history.
    private(set) var items: [UniqueStep<Step>]

    /// The direction of the last navigation action (`.forward` for `push`, `.backward` for `pop`).
    public private(set) var direction: FlowDirection = .forward

    /// Initializes a new flow history with an initial step.
    /// - Parameter initial: The first step in the navigation flow.
    public init(_ initial: Step) {
        self.items = [UniqueStep(step: initial)]
    }

    /// Pushes a new step onto the navigation stack.
    /// - Parameter step: The new step to add to the history.
    public mutating func push(_ step: Step) {
        items.append(UniqueStep(step: step))
        direction = .forward
    }

    /// Removes the top step from the navigation stack, moving back in the history.
    ///
    /// If `canPop` is `false`, this method has no effect.
    public mutating func pop() {
        guard canPop else { return }
        _ = items.removeLast()
        direction = .backward
    }
}

/// A protocol defining the requirements for a navigation flow controller.
///
/// A type conforming to `Flow` is an `Observable` object that manages the state and
/// business logic for a multi-step user interface, such as an onboarding sequence or a wizard.
@MainActor
public protocol Flow: AnyObject, Observable {
    /// The type representing the distinct steps in the flow, often an enum.
    associatedtype Step: Equatable, Sendable

    /// The history of navigation steps. The `FlowView` observes this property for changes.
    var history: FlowHistory<Step> { get set }

    /// A Boolean value that indicates whether the flow can advance to a next step.
    var hasNext: Bool { get }

    /// Asynchronously advances the flow to the next step.
    ///
    /// This method should contain the logic for determining and pushing the next step onto the `history`.
    func next() async throws

    /// Moves the flow to the previous step.
    ///
    /// A default implementation is provided that pops the `history` stack.
    func previous()
}

extension Flow {
    /// The current step value, unwrapped from its `UniqueStep` container.
    public var step: Step { history.top.step }

    /// The direction of the last navigation action.
    public var direction: FlowDirection { history.direction }

    /// A Boolean value indicating whether the flow can navigate to a previous step.
    public var hasPrevious: Bool { history.canPop }

    /// Moves to the previous step in the history.
    @MainActor public func previous() { history.pop() }
}
